{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"So You Wana Be an AI Engineer? Ok, I think most people do not want to be an AI Engineer. Being an AI Scientist is more sexy & is always at the front & center of all the bosses, with smooches for executing seemingly difficult but yet copied from the latest SOTA open-sourced models. But who cares, the model works, the attention & prestige is nice, & hey, they have PhDs even though their theses, more often than not, has nothing to do with AI. AI Engineers though, are the unsung heros. They understand modelling, they understand engineering, and heck, they know how to do almost anything! Database, web development, cloud engineering, application testing, deployment, and certainly how to train a SOTA model from an open-sourced repository too. Imagine a small data science team or during a crisis period, will they hire/retain an AI Scientist? Or an AI Engineer? The good thing is, you can always change your job role as AI Scientist anytime! Can't say that for the former. Besides their full stack technical capabilities, good AI Engineers also need to have certain attributes. An incredible intolerance for slobby work Great organizational abilities A demand for reproductible work with strong documentation. Such a wide range of expertise is difficult to find, so a company who values AI Engineers will not devalue them in terms of compensation. Still not convinced? Well, I would say that I have seen a number of AI Scientists starting to learn more engineering aspects of AI. Heck, even they secretly aspire to be an AI Engineer, though they still want to wear their scientists hats. Now that I'm done with the rambling, if you are ready to hop on the bandwagon, let's start with some basics.","title":"Introduction"},{"location":"#so-you-wana-be-an-ai-engineer","text":"Ok, I think most people do not want to be an AI Engineer. Being an AI Scientist is more sexy & is always at the front & center of all the bosses, with smooches for executing seemingly difficult but yet copied from the latest SOTA open-sourced models. But who cares, the model works, the attention & prestige is nice, & hey, they have PhDs even though their theses, more often than not, has nothing to do with AI. AI Engineers though, are the unsung heros. They understand modelling, they understand engineering, and heck, they know how to do almost anything! Database, web development, cloud engineering, application testing, deployment, and certainly how to train a SOTA model from an open-sourced repository too. Imagine a small data science team or during a crisis period, will they hire/retain an AI Scientist? Or an AI Engineer? The good thing is, you can always change your job role as AI Scientist anytime! Can't say that for the former. Besides their full stack technical capabilities, good AI Engineers also need to have certain attributes. An incredible intolerance for slobby work Great organizational abilities A demand for reproductible work with strong documentation. Such a wide range of expertise is difficult to find, so a company who values AI Engineers will not devalue them in terms of compensation. Still not convinced? Well, I would say that I have seen a number of AI Scientists starting to learn more engineering aspects of AI. Heck, even they secretly aspire to be an AI Engineer, though they still want to wear their scientists hats. Now that I'm done with the rambling, if you are ready to hop on the bandwagon, let's start with some basics.","title":"So You Wana Be an AI Engineer?"},{"location":"demo/","text":"","title":"Demo"},{"location":"flask/","text":"Flask Flask is a micro web framework written in Python. It is easy and fast to implement. How is it relevant to AI? Sometimes, it might be necessary to run models in the a server or cloud, and the only way is to wrap the model in a web application. The input containing the data for predicting & the model parameters, aka Request will be send to this API containing the model which does the prediction, and the Response containing the results will be returned. Flask is the most popular library for such a task. Simple Flask App Below is a simple flask app to serve an ML model's prediction. Assuming this app is named serve_http.py , we can launch this flask app locally via python serve_http.py . The API can be accessed via http://localhost:5000/ . \"\"\"flask app for model prediction\"\"\" from flask import Flask , request from predict import detectObj from utils_serve import array2json , from_base64 app = Flask ( __name__ ) @app . route ( \"/\" , methods = [ \"POST\" ]) def get_predictions (): \"\"\"Returns pred output in json\"\"\" try : req_json = request . json # get image array encodedImage = req_json [ \"requests\" ][ 0 ][ \"image\" ][ \"content\" ] decodedImage = from_base64 ( encodedImage ) # get input arguments features = req_json [ \"requests\" ][ 0 ][ \"features\" ][ 0 ] min_height = features . get ( \"min_height\" ) or 0.03 min_width = features . get ( \"min_width\" ) or 0.03 maxResults = features . get ( \"maxResults\" ) or 20 score_th = features . get ( \"score_th\" ) or 0.3 nms_iou = features . get ( \"nms_iou\" ) or 0.4 # get pred-output pred_bbox = detectObj ( decodedImage , min_height , min_width , maxResults , score_th , nms_iou ) # format to response json output json_output = array2json ( pred_bbox , class_mapper ) return json_output except Exception as e : print ( e ) if __name__ == '__main__' : app . run () Gunicorn Flask as a server is meant for development, as it tries to remind you everytime you launch it. It has very limited parameters to manage the server, wrappers are available to connect Flask to a feature rich web server. Gunicorn is one of the most popular, and also probably the easiest to use. # gunicorn -w 2 flaskscript:flaskapp # it uses port 8000 by default, but we can change it gunicorn --bind 0 .0.0.0:5000 -w 2 serve_http:app","title":"Flask"},{"location":"flask/#flask","text":"Flask is a micro web framework written in Python. It is easy and fast to implement. How is it relevant to AI? Sometimes, it might be necessary to run models in the a server or cloud, and the only way is to wrap the model in a web application. The input containing the data for predicting & the model parameters, aka Request will be send to this API containing the model which does the prediction, and the Response containing the results will be returned. Flask is the most popular library for such a task.","title":"Flask"},{"location":"flask/#simple-flask-app","text":"Below is a simple flask app to serve an ML model's prediction. Assuming this app is named serve_http.py , we can launch this flask app locally via python serve_http.py . The API can be accessed via http://localhost:5000/ . \"\"\"flask app for model prediction\"\"\" from flask import Flask , request from predict import detectObj from utils_serve import array2json , from_base64 app = Flask ( __name__ ) @app . route ( \"/\" , methods = [ \"POST\" ]) def get_predictions (): \"\"\"Returns pred output in json\"\"\" try : req_json = request . json # get image array encodedImage = req_json [ \"requests\" ][ 0 ][ \"image\" ][ \"content\" ] decodedImage = from_base64 ( encodedImage ) # get input arguments features = req_json [ \"requests\" ][ 0 ][ \"features\" ][ 0 ] min_height = features . get ( \"min_height\" ) or 0.03 min_width = features . get ( \"min_width\" ) or 0.03 maxResults = features . get ( \"maxResults\" ) or 20 score_th = features . get ( \"score_th\" ) or 0.3 nms_iou = features . get ( \"nms_iou\" ) or 0.4 # get pred-output pred_bbox = detectObj ( decodedImage , min_height , min_width , maxResults , score_th , nms_iou ) # format to response json output json_output = array2json ( pred_bbox , class_mapper ) return json_output except Exception as e : print ( e ) if __name__ == '__main__' : app . run ()","title":"Simple Flask App"},{"location":"flask/#gunicorn","text":"Flask as a server is meant for development, as it tries to remind you everytime you launch it. It has very limited parameters to manage the server, wrappers are available to connect Flask to a feature rich web server. Gunicorn is one of the most popular, and also probably the easiest to use. # gunicorn -w 2 flaskscript:flaskapp # it uses port 8000 by default, but we can change it gunicorn --bind 0 .0.0.0:5000 -w 2 serve_http:app","title":"Gunicorn"},{"location":"virtual_env/","text":"Virtual Environment Every project has a different set of requirements & different sets of python packages might be required to support it. The versions of each package can differ or break with each python or dependent packages versions update, so it is important to isolate every project within an enclosed virtual environment. Anaconda Anaconda is a python installation that bundles all essential packages for a data science project, hence by default most people will have this installed. It comes with its own virtual environment. Here are the basic commands to create & remove. conda create -n <yourenvname> python = 3 .7 pip install -r requirements.txt conda activate <yourenvname> conda deactivate conda env list conda env remove -n <yourenvname> VENV venv is my next favourite, as it is a default library shipped with python, and very easy to setup. The libraries will be installed in the directory you are in, so remember to add the folder in .gitignore . To remove the libraries, just delete the folder that was created. cd <projectfolder> python -m venv <name> source <name>/bin/activate pip install -r requirements.txt deactivate","title":"Virtual Environment"},{"location":"virtual_env/#virtual-environment","text":"Every project has a different set of requirements & different sets of python packages might be required to support it. The versions of each package can differ or break with each python or dependent packages versions update, so it is important to isolate every project within an enclosed virtual environment.","title":"Virtual Environment"},{"location":"virtual_env/#anaconda","text":"Anaconda is a python installation that bundles all essential packages for a data science project, hence by default most people will have this installed. It comes with its own virtual environment. Here are the basic commands to create & remove. conda create -n <yourenvname> python = 3 .7 pip install -r requirements.txt conda activate <yourenvname> conda deactivate conda env list conda env remove -n <yourenvname>","title":"Anaconda"},{"location":"virtual_env/#venv","text":"venv is my next favourite, as it is a default library shipped with python, and very easy to setup. The libraries will be installed in the directory you are in, so remember to add the folder in .gitignore . To remove the libraries, just delete the folder that was created. cd <projectfolder> python -m venv <name> source <name>/bin/activate pip install -r requirements.txt deactivate","title":"VENV"}]}